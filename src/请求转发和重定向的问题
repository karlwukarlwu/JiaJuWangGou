在 Java Web 中，特别是使用 Servlet 技术，请求转发（Forward）和重定向（Redirect）是两种常见的页面跳转方式。它们之间有几个关键的区别：

1. **执行的地方**:
   - **请求转发**：在服务器端执行。客户端发送一个请求给服务器，服务器内部在不同的资源之间进行转发，客户端并不知道内部发生了转发。
   - **重定向**：在客户端执行。服务器告诉客户端跳转到另一个 URL，然后客户端会发起一个新的请求。

2. **浏览器地址栏的变化**:
   - **请求转发**：地址栏不变，因为客户端只发送了一次请求。
   - **重定向**：地址栏会变，因为客户端发起了第二次请求到新的 URL。

3. **请求的次数**:
   - **请求转发**：只有一次请求。
   - **重定向**：有两次请求，先是原始请求，然后是重定向到的新请求。

4. **数据共享**:
   - **请求转发**：可以通过 request.setAttribute() 和 request.getAttribute() 共享数据，因为是同一个请求。
   - **重定向**：不可以使用 request 来共享数据，因为是两个不同的请求。但可以使用 session 或者 URL 参数来传递数据。

5. **效率**:
   - **请求转发**：相对更高效，因为只有一次请求，并且没有网络延迟。
   - **重定向**：相对较慢，因为涉及到两次网络请求。

6. **实现方法**:
   - **请求转发**：
     ```java
     RequestDispatcher dispatcher = request.getRequestDispatcher("/path/to/resource.jsp");
     dispatcher.forward(request, response);
     ```
   - **重定向**：
     ```java
     response.sendRedirect("/path/to/anotherResource.jsp");
              resp.sendRedirect(req.getContextPath() + "/manage/furnServlet?action=list");
     ```

7. **响应状态**:
   - **请求转发**：HTTP 响应状态通常是 200 OK（因为对客户端来说，只有一个请求，那就是原始请求）。
   - **重定向**：初次响应是 3xx（通常是 302 Found），然后客户端对新 URL 发起的请求得到的响应通常是 200 OK 或其他状态。

根据具体的应用需求，可以选择使用请求转发或重定向。例如，如果想在跳转前后共享数据且不想更改浏览器的地址栏，那么请求转发可能是一个好选择；而如果需要将用户重定向到完全不同的站点或应用，那么重定向会是更好的选择。

请求转发不走过滤器 重定向走过滤器
谨慎区分