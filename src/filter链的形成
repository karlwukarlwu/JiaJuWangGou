在Java Web应用中，`Filter`不是以嵌套的方式工作的，而是基于定义的顺序形成一个链式结构。每一个`Filter`都可以对请求和响应进行操作，然后决定是否继续传递请求给下一个`Filter`，直到请求到达目标资源（如Servlet）。这就是为什么它被称为`FilterChain`（过滤器链）。

你可以在`web.xml`中定义多个`Filter`，它们的执行顺序将基于在`web.xml`中的定义顺序。例如：

```xml
<filter>
    <filter-name>FirstFilter</filter-name>
    <filter-class>com.example.FirstFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>FirstFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter>
    <filter-name>SecondFilter</filter-name>
    <filter-class>com.example.SecondFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>SecondFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
```

在上面的配置中，当一个请求到达，首先会被`FirstFilter`处理，然后是`SecondFilter`。

为确保请求从一个`Filter`传递到下一个，你需要在每个`Filter`的`doFilter`方法中调用`chain.doFilter(request, response)`。

你不能在一个`Filter`中直接"嵌套"另一个`Filter`，但是你可以在`Filter`内部执行逻辑并基于某些条件决定是否继续传递请求。这种行为看起来可能像嵌套，但实际上它仍然基于`FilterChain`的机制。

总结：`Filter`是链式执行的，而不是嵌套执行的。你可以通过定义和配置顺序来控制它们的执行顺序。